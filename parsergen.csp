#!/usr/bin/env cs
#
# Covariant Script Parser Generator
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Copyright (C) 2017-2021 Michael Lee(李登淳)
#
# Email:   lee@covariant.cn, mikecovlee@163.com
# Github:  https://github.com/mikecovlee
# Website: http://covscript.org.cn

package parsergen

import regex

# ParserGen Syntax

struct syntax_impl
    var type = null
    var data = null
end

namespace syntax_type
@begin
    constant
        token  = 1,
        term   = 2,
        ref    = 3,
        nlook  = 4,
        repeat = 5,
        opt    = 6,
        cond   = 7
@end
end

function make_syntax(type, data)
    var s = new syntax_impl
    s.type = type
    s.data = data
    return move(s)
end

namespace syntax
    function token(data)
        return make_syntax(syntax_type.token, data)
    end
    function term(data)
        return make_syntax(syntax_type.term, data)
    end
    function ref(name)
        return make_syntax(syntax_type.ref, name)
    end
    # ?!(...), Negative Lookahead
    function nlook(...args)
        return make_syntax(syntax_type.nlook, args)
    end
    # {...}
    function repeat(...args)
        return make_syntax(syntax_type.repeat, args)
    end
    # [...]
    function optional(...args)
        return make_syntax(syntax_type.opt, args)
    end
    # a | b | c... ==> {a}, {b}, {c}...
    function cond_or(...args)
        return make_syntax(syntax_type.cond, args)
    end
end

# Grammar Class
# ext: File Extension Filter described by Regular Expression
# lex: Lexical Rules written in Regular Expression
# stx: Syntax Rules written in ParserGen Syntax
class grammar
    var ext = ".*"
    var lex = null
    var stx = null
end

# Lexer

struct token_type
    var pos = {0, 0}
    var type = null
    var data = null
end

function make_token(pos, type, data)
    var t = new token_type
    t.pos = pos
    --t.pos[0]
    t.type = type
    t.data = data
    return move(t)
end

struct lex_error
    var text = new string
    var pos = {0, 0}
end

class lexer_type
    var lexical_set = new hash_set
    var error_log = new array
    var output = new array
    var buff = new string
    var data = null
    var pos = {0, 0, 0}
    function cursor_forward()
        ++pos[2]
        if pos[2] != data.size
            if data[pos[2]] == '\n'
                ++pos[1]
                pos[0] = 0
            else
                ++pos[0]
            end
        end
    end
    function error(str, pos)
        var err = new lex_error
        err.text = str
        err.pos = pos
        --err.pos[0]
        error_log.push_back(move(err))
    end
    function process_token()
        if lexical_set.size > 1
            if lexical_set.exist("err")
                error("Unexpected input \"" + buff + "\"", pos)
                lexical_set = new hash_set
                continue
            else
                if lexical_set.exist("ign")
                    lexical_set.erase("ign")
                end
                if lexical_set.size > 1
                    error("Ambiguous lexical \"" + buff + "\"", pos)
                    lexical_set = new hash_set
                    continue
                end
            end
        end
        var rule = null
        foreach it in lexical_set do rule = it
        if rule != "ign"
            output.push_back(make_token(wpos, rule, buff))
        end
    end
    function run(lexical, text)
        var wpos = {0, 0}
        data = text
        while pos[2] != data.size
            var ch = data[pos[2]]
            if lexical_set.empty()
                var nbuff = to_string(ch)
                foreach it in lexical
                    if !it.second.match(nbuff).empty()
                        lexical_set.insert(it.first)
                    end
                end
                if !lexical_set.empty()
                    wpos = pos
                    buff = nbuff
                else
                    error("Unknown character \'" + nbuff + "\'", pos)
                end
                cursor_forward()
            else
                var nbuff = buff + ch
                var nset = new hash_set
                foreach it in lexical_set
                    if lexical[it].match(nbuff).empty()
                        nset.insert(it)
                    end
                end
                nset = hash_set.subtract(lexical_set, nset)
                if nset.empty()
                    process_token()
                    lexical_set = new hash_set
                else
                    lexical_set = nset
                    buff = nbuff
                    cursor_forward()
                end
            end
        end
        process_token()
        return output
    end
end

# Parser

struct syntax_tree
    var root = new string
    var nodes = new array
end

struct parse_stage
    var product = new syntax_tree
    var cursor = 0
end

struct parse_error
    var cursor = 0
    var text = new string
    var pos = {0, 0}
end

namespace parse_state
@begin
    constant
        accept =  1,
        stop   =  2,
        reject = -1,
        eof    = -2
@end
end

class parser_type
    # Error Reporting
    var error_log = new array
    var max_cursor = 0
    # Parsing
    var on_ign = false
    var stack = new array
    var syn = null
    var lex = null
    # Logging
    var log_indent = 0
    var log = false
    # Parsing Stage
    function push_stage(root)
        var prev_cursor = 0
        if !stack.empty()
            prev_cursor = stack.front.cursor
        end
        stack.push_front(new parse_stage)
        stack.front.product.root = root
        stack.front.cursor = prev_cursor
    end
    function pop_stage()
        return stack.pop_front()
    end
    # Parsing Product
    function push(val)
        stack.front.product.nodes.push_back(val)
    end
    # Token Streams
    function cursor()
        return stack.front.cursor
    end
    function eof()
        return cursor() >= lex.size
    end
    function peek()
        if eof()
            throw runtime.exception("EOF")
        end
        return lex[cursor()]
    end
    function get()
        if eof()
            throw runtime.exception("EOF")
        end
        return lex[cursor()++]
    end
    # Error & Logs
    function error(str, pos)
        var err = new parse_error
        err.cursor = cursor()
        err.text = str
        err.pos = pos
        if err.cursor > max_cursor
            max_cursor = err.cursor
        end
        error_log.push_back(move(err))
    end
    # N: Error Level
    function get_log(n)
        var set = new hash_set
        var arr = new array
        foreach it in error_log
            if it.cursor >= max_cursor - n && !set.exist(it.text)
                set.insert(it.text)
                arr.push_back(it)
            end
        end
        return move(arr)
    end
    # SS: Stack Size
    # CP: Cursor Position
    function parse_log(txt)
        if log
            @begin
            system.out.print(
                "SS = " + stack.size + "\t" +
                "CP = " + cursor() + "\t"
            )
            @end
            foreach i in range(log_indent) do system.out.print("  ")
            system.out.println(txt)
        end
    end
    # Parsing Methods
    function accept()
        var new_cursor = cursor()
        var dat = pop_stage().product
        push(dat)
        cursor() = new_cursor
    end
    function merge()
        var new_cursor = cursor()
        var dat = pop_stage().product
        foreach it in dat.nodes do push(it)
        cursor() = new_cursor
    end
    function match_syntax(seq)
        foreach it in seq
            var result = this.match(it)
            if result != parse_state.accept
                return result
            end
        end
        return parse_state.accept
    end
    function ignore()
        if !on_ign && syn.exist("ignore")
            on_ign = true
            push_stage("ignore")
            if match_syntax(syn.ignore) == parse_state.accept
                var new_cursor = cursor()
                pop_stage()
                cursor() = new_cursor
            else
                pop_stage()
            end
            on_ign = false
        end
    end
    # Match:  Terminal Symbols
    # Deduct: Unstarred Nonterminals
    # Accept: Matching Successfully
    # Reject: Matching Failed, Rollback
    function match(it)
        if eof()
            return parse_state.eof
        end
        switch it.type
            case syntax_type.token
                parse_log("Match  " + it.data)
                if peek().type != it.data
                    ignore()
                end
                if peek().type == it.data
                    parse_log("Accept " + it.data)
                    push(get())
                else
                    parse_log("Reject " + it.data)
                    error("Unexpected Token \'" + peek().data + "\'", peek().pos)
                    return parse_state.reject
                end
            end
            case syntax_type.term
                parse_log("Match  " + it.data)
                if peek().data != it.data
                    ignore()
                end
                if peek().data == it.data
                    parse_log("Accept " + it.data)
                    push(get())
                else
                    parse_log("Reject " + it.data)
                    error("Unexpected Token \'" + peek().data + "\'", peek().pos)
                    return parse_state.reject
                end
            end
            case syntax_type.ref
                push_stage(it.data)
                parse_log("Deduct " + it.data)
                ++log_indent
                var result = match_syntax(syn[it.data])
                if result > 0
                    --log_indent
                    parse_log("Accept " + it.data)
                    accept()
                else
                    --log_indent
                    parse_log("Reject " + it.data)
                    pop_stage()
                    return result
                end
            end
            case syntax_type.nlook
                push_stage("nlook")
                var result = match_syntax(it.data)
                pop_stage()
                if result == parse_state.accept
                    return parse_state.stop
                end
            end
            case syntax_type.repeat
                loop
                    push_stage("repeat")
                    var result = match_syntax(it.data)
                    switch result
                        case parse_state.accept
                            merge()
                        end
                        case parse_state.stop
                            merge()
                            break
                        end
                        default
                            pop_stage()
                            break
                        end
                    end
                end
            end
            case syntax_type.opt
                push_stage("optional")
                var result = match_syntax(it.data)
                if result > 0
                    merge()
                else
                    pop_stage()
                end
            end
            case syntax_type.cond
                var matched = false
                foreach seq in it.data
                    push_stage("cond_or")
                    var result = match_syntax(seq)
                    if result > 0
                        matched = true
                        merge()
                        break
                    else
                        pop_stage()
                    end
                end
                if !matched
                    error("No matching syntax", peek().pos)
                    return parse_state.reject
                end
            end
        end
        return parse_state.accept
    end
    function run(grammar, lex_output)
        syn = grammar
        lex = lex_output
        push_stage("begin")
        return match_syntax(syn.begin) > 0 && eof() && stack.size == 1
    end
end

# Wrapped Methods

function print_header(txt)
    foreach i in range(txt.size) do system.out.print('#')
    system.out.println("")
    system.out.println(txt)
    foreach i in range(txt.size) do system.out.print('#')
    system.out.println("")
end

function print_error(code, err)
    foreach it in err
        system.out.print("File \"" + context.cmd_args[1] + "\", line " + (it.pos[1] + 1) + ": ")
        system.out.println(it.text)
        system.out.println("> " + code[it.pos[1]])
        foreach i in range(it.pos[0] + 2) do system.out.print(' ')
        system.out.print("^")
        system.out.println("\n")
    end
end

function print_ast_impl(indent, tree)
    if tree == null
        return
    end
    system.out.println(tree.root)
    foreach it in tree.nodes
        foreach i in range(indent + 2) do system.out.print(' ')
        system.out.print(tree.root + " -> ")
        if typeid it == typeid syntax_tree
            print_ast_impl(indent + 2, it)
        end
        if typeid it == typeid token_type
            system.out.println("\"" + it.data + "\"")
        end
    end
end

function print_ast(tree)
    print_ast_impl(0, tree)
end

class generator
    # Grammars
    var rules = new hash_map
    # String Input
    var input = new string
    # Line Separated Input(for Error Reporting)
    var code_buff = new array
    # Lexer Output
    var token_buff = null
    # Parser Output
    var ast = null
    # Workers
    var lexer = null
    var parser = null
    # Options
    var stop_on_error = true
    var enable_log = false
    # Private Methods
    function priv_run(lang)
        if rules.exist(lang)
            lexer = new lexer_type
            if enable_log
                print_header("Begin Lexical Analysis...")
            end
            if rules[lang].lex == null
                print_header("Lexical rules not found! Stop")
                return
            end
            token_buff = lexer.run(rules[lang].lex, input)
            if !lexer.error_log.empty()
                if stop_on_error
                    print_header("Compilation Error")
                else
                    print_header("Compilation Warning")
                end
                print_error(code_buff, lexer.error_log)
                if stop_on_error
                    return
                end
            end
            parser = new parser_type
            parser.log = enable_log
            if enable_log
                print_header("Lexer Output")
                foreach it in token_buff do system.out.println("Type = " + it.type + "\tData = " + it.data + "\tPos = (" + it.pos[0] + ", " + it.pos[1] + ")")
                print_header("Begin Syntactic Analysis...")
            end
            if rules[lang].stx == null
                print_header("Syntactic rules not found! Stop")
                return
            end
            if parser.run(rules[lang].stx, token_buff)
                ast = parser.stack.front.product
            else
                print_header("Compilation Error")
                var err = {(lexer.error_log)..., (parser.get_log(0))...}
                err.sort([](lhs, rhs)->lhs.pos[1] < rhs.pos[1])
                print_error(code_buff, err)
            end
        end
    end
    # Public Methods
    function add_grammar(lang, gram)
        rules[lang] = gram
    end
    function from_file(path)
        var ifs = iostream.ifstream(path)
        if !ifs.good()
            return
        end
        input = new string
        code_buff = new array
        while ifs.good()
            var line = ifs.getline()
            input += line + "\n"
            for i = 0, i < line.size, ++i
                if line[i] == '\t'
                    line.assign(i, ' ')
                end
            end
            code_buff.push_back(line)
        end
        foreach it in rules
            var reg = regex.build(it.second.ext)
            if !reg.match(path).empty()
                priv_run(it.first)
                return
            end
        end
    end
    function from_string(lang, str)
        input = str
        code_buff = input.split({'\n'})
        priv_run(lang)
    end
end